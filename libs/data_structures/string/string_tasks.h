#ifndef INC_1_STRING_TASKS_H
#define INC_1_STRING_TASKS_H

#include "string_.h"
#include <stdbool.h>

void assertString(const char *expected, char *got,
                  char const *fileName, char const *funcName,
                  int line);

char *getEndOfString(char *s);

void removeNonLetters(char *s);

// —É–¥–∞–ª–∏—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤—Å–µ –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
void task1(char *s);

void test_task1_CommonCase();

void test_task1_AllSpace();

// –°–æ–∫—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–µ–ª–æ–≤ –º–µ–∂–¥—É
// —Å–ª–æ–≤–∞–º–∏ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–æ –æ–¥–Ω–æ–≥–æ
void removeExtraSpaces(char *s);

void test_task2_CommonCase();

void test_task2_OneSpace();

int getWord(char *beginSearch, WordDescriptor *word);

// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã —Ü–∏—Ñ—Ä—ã –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ –±—ã–ª–∏
// –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –Ω–∞—á–∞–ª–æ —Å–ª–æ–≤–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏—Ö –≤ —Å–ª–æ–≤–µ,
// –±—É–∫–≤—ã –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω–µ—Ü —Å–ª–æ–≤–∞.
void digitToStartWithSavingOrder(WordDescriptor word);

void digitToStartForEveryWord(char *s);

void test_digitToStartForEveryWord_CommonCase();

void test_digitToStartForEveryWord_digitsInWord();

// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É, –∑–∞–º–µ–Ω—è—è –∫–∞–∂–¥—É—é —Ü–∏—Ñ—Ä—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –µ–π —á–∏—Å–ª–æ–º
// –ø—Ä–æ–±–µ–ª–æ–≤
void replacingNumberWithSpaces(char *s);

void test_numberTurnIntoSpaces_CommonCase();

void test_numberTurnIntoSpaces_OnlyDigits();

void test_numberTurnIntoSpaces_OnlyLetters();

// –ó–∞–º–µ–Ω–∏—Ç—å –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è —Å–ª–æ–≤–∞ ùë§1 –Ω–∞ —Å–ª–æ–≤–æ ùë§2
void replace(char *source, char *w1, char *w2);

void test_replace_CommonCase();

int areWordsEqual(WordDescriptor w1,
                  WordDescriptor w2);

// –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —É–ø–æ—Ä—è–¥–æ—á–µ–Ω—ã –ª–∏ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å–ª–æ–≤–∞ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
bool isLexicallyOrderedSentence(char *s);

void test_isLexicallyOrderedSentence_CommonCase();

void test_isLexicallyOrderedSentence_onlySpaces();

void test_isLexicallyOrderedSentence_notOrdered();

#endif //INC_1_STRING_TASKS_H
